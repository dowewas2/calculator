# This file was *autogenerated* from the file example.sage
from sage.all_cmdline import *   # import sage library
_sage_const_p0010 = RealNumber('.0010'); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2p17 = RealNumber('2.17'); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_12 = Integer(12); _sage_const_18 = Integer(18); _sage_const_27 = Integer(27)# solves for x
def mysolve(f):
	var('x')
	return solve(f,x)

# plots a function

def myplot(f, a, b):
	var( 'x' )
	g = Graphics()
	g += plot(f, (x, a, b))	
	#g += plot((1-x^2)^(-1/2), (x, -10, 10))
	return g.show( )

#example

var( 'x' )
g = Graphics()
g += plot(arctan(x)/(x**_sage_const_2 +_sage_const_1 ), (x, _sage_const_0 , _sage_const_p0010 ))	
g += plot(_sage_const_2 /(x**_sage_const_2 ), (x, _sage_const_0 , _sage_const_p0010 ))

g.show()

def myapp(a):
	return a.numerical_approx()



# limit for the left and right
def myleftlimit(f, a):
	var('x')
	return f.limit(x=a,dir='-')
def myrightlimit(f, a):
	var('x')
	return f.limit(x=a,dir='+')
def mylimit(f, a):
	var( 'x' )
	return f.limit( x=a )

# Solve a system of equations
def ex( ):
	A = matrix([
		[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
		[_sage_const_8 ,_sage_const_4 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
		[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_8 ,_sage_const_4 ,_sage_const_2 ,_sage_const_1 ],
		[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_27 ,_sage_const_9 ,_sage_const_3 ,_sage_const_1 ],
		[_sage_const_12 ,_sage_const_4 ,_sage_const_1 ,_sage_const_0 ,-_sage_const_12 ,-_sage_const_4 ,-_sage_const_1 ,_sage_const_0 ],
		[_sage_const_0 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
		[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_18 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ],
		[_sage_const_12 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,-_sage_const_12 ,-_sage_const_2 ,_sage_const_0 ,_sage_const_0 ]])
	b = vector([_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ])
	A.solve_right( b )
	return ( ) 

# Integrates a function with respect to x
def myintbounds(f,a,b):
	return integrate(f, x,a,b)
# Integrates a function with respect to x with bounds
def myint(f):
	return integrate(f, x)	

# Differentiate a function with respct to x
derivative( sin(x/_sage_const_2 ),x )


def funtwo(P, r, t, n):
	A = P + r + t + n
	return A


# Calculates amount invested (contans)


def fun_three(P, r, t):
    A = P*_sage_const_2p17 **(r*t)
    return _sage_const_2  * A * A
